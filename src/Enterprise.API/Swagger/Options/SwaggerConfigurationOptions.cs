using System.Reflection;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace Enterprise.API.Swagger.Options;

public class SwaggerConfigurationOptions
{
    /// <summary>
    /// By default Swagger is enabled.
    /// It can never be enabled in a production environment (for security purposes).
    /// </summary>
    public bool EnableSwagger { get; set; }

    /// <summary>
    /// The token security service that is the centralized token authority.
    /// </summary>
    public string Authority { get; set; }

    /// <summary>
    /// The OAuth client for the swagger documentation page.
    /// </summary>
    public string OAuthClientId { get; set; }

    /// <summary>
    /// The available OAuth scopes.
    /// </summary>
    public Dictionary<string, string> OAuthScopes { get; set; }

    /// <summary>
    /// The OAuth application name.
    /// </summary>
    public string OAuthAppName { get; set; }

    /// <summary>
    /// The application name.
    /// </summary>
    public string ApplicationName { get; set; }

    /// <summary>
    /// A brief (optional) description of the application.
    /// </summary>
    public string ApplicationDescription { get; set; }

    /// <summary>
    /// Used to retrieve XML comments for models contained in a separate API client project/assembly.
    /// NOTE: an XML documentation file must be generated by the target project.
    /// </summary>
    public Func<Assembly>? GetApiClientAssembly { get; set; }

    /// <summary>
    /// An optional extensibility hook for adding application specific customizations.
    /// These can include operation filters, document filters, etc.
    /// </summary>
    public Action<SwaggerGenOptions>? PostConfigure { get; set; }

    /// <summary>
    /// This allows for complete control over how swagger is configured.
    /// If provided, the prebuilt default will not be applied.
    /// </summary>
    public Action<SwaggerGenOptions>? CustomConfigure { get; set; }

    /// <summary>
    /// Create a new SwaggerConfigurationOptions with the default settings.
    /// </summary>
    public SwaggerConfigurationOptions()
    {
        EnableSwagger = true;
        Authority = string.Empty;
        OAuthClientId = string.Empty;
        OAuthScopes = new Dictionary<string, string>();
        OAuthAppName = string.Empty;
        ApplicationName = string.Empty;
        ApplicationDescription = string.Empty;
        GetApiClientAssembly = null;
        PostConfigure = null;
        CustomConfigure = null;
    }
}